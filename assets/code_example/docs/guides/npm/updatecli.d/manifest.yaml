name: npm manifest guide

sources:
  npm:
    name: Get latest axios version
    kind: npm
    spec:
      name: axios
      versionfilter:
        kind: semver
        pattern: ^1.0.0

targets:
  npn:
    name: Ensure package.json and package-lock.json is up to date
    kind: shell

    # The default behavior for a target is to have one of its spec fields defaulting to the source resource output.
    #
    # More specifically for a resource of kind "shell", updatecli would append the value after the command such as
    # `npm install --package-lock-only --dry-run=$DRY_RUN axios@ 1.0.0`
    # Please note the space between axios@ and 1.0.0
    #
    # In this context, it doesn't work as the npm command requires axios@1.0.0 to be attached without a space
    #
    # Therefore we disable the default source output by using the parameter "disablesourceinput: true"
    # And then we use the Updatecli specific templating function {{ source "<sourceID>" }}
    disablesourceinput: true

    # scmid binds a target with a scm configuration.
    # Updatecli clones the git repository in a temporary location, then updates it
    # according to the current declarative pipeline.
    scmid: default

    # Spec contains the specific parameter for a specific kind of resource which in this case is the "shell" resource
    spec:

      # The DRY_RUN environment variable is set and used by Updatecli to identify:
      #   1. If we are in "dry-run" mode by running `updatecli diff --config manifest.yaml`
      #   2. If we are in "apply" mode by running `updatecli apply --config manifest.yaml`
      command: npm install --package-lock-only --dry-run=$DRY_RUN axios@{{ source "npm" }}

      # By default, shell command only have access to the DRY_RUN environment variable.
      # But in this situation, we would also need the PATH value to identify where the npm command is located.
      #
      # As the PATH environment value is not defined it inherits its value from the Updatecli process.
      environments:
        - name: PATH

      # changedif defines how Updatecli should interpret a failure or a change.
      # In this case we use the "file/checksum" changedif kind.
      # A filechecksum change would report a change.
      changedif:
        kind: file/checksum
        spec:
          files:
            - package-lock.json
            - package.json

      # npm expects to run the command from the directory containing the package.json
      # workdir allows to specify the path where to run the command.
      # If the resource has a scmid, then the workdir relative path is from the cloned scm directory
      # in the temporary directory such as /tmp/updatecli on POSIX system.
      workdir: "assets/code_example/docs/guides/npm/"

# scms defines the git repository configuration used by the target and the action.
# Updatecli will clone that repository in the OS temporary location such as /tmp on Darwin or Linux system.
scms:
  default:
    kind: github
    spec:
      owner: updatecli
      repository: website
      # To handle secrets, Updatecli can either use environment variable or sops secrets.
      # When executed from GitHub Action, using GITHUB_TOKEN and GITHUB_ACTOR is quite convenient.
      token: '{{ requiredEnv "GITHUB_TOKEN" }}'
      username: '{{ requiredEnv "GITHUB_ACTOR" }}'
      branch: master

# actions are actions to execute if the state of a binded target is changed.
# Ex: opening a pullrequest.
actions:
  default:
    # The github/pullrequest means Updatecli will create a temporary branch containing all the changes
    # generated by the different targets using the same scmid.
    #
    # Then if there is a change, it will opens a pull request targeting the scm branch referenced by scmid.
    kind: github/pullrequest
    scmid: default
    spec:
      labels:
        - dependencies
      automerge: true
      usetitleforautomerge: true
      mergemethod: squash
