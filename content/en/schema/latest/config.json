{
    "$schema": "http://json-schema.org/draft-04/schema",
    "$id": "https://www.updatecli.io/latest/schema/spec",
    "properties": {
        "name": {
            "type": "string",
            "description": "\"name\" defines a pipeline name\n\n\t\texample:\n\t\t\t* \"name: 'deps: update nodejs version to latest stable'\"\n\n\t\tremark:\n\t\t\t* using a short sentence describing the pipeline is a good way to name your pipeline.\n\t\t\t* using conventional commits convention is a good way to name your pipeline.\n\t\t\t* \"name\" is often used a default values for other configuration such as pullrequest title.\n\t\t\t* \"name\" shouldn't contain any dynamic information such as source output."
        },
        "pipelineid": {
            "type": "string",
            "description": "\"pipelineid\" allows to identify a full pipeline run.\n\n\t\texample:\n\t\t\t* \"pipelineid: nodejs/dependencies\"\n\t\t\t* \"pipelineid: gomod/github.com/updatecli/updatecli\"\n\t\t\t* \"pipelineid: autodiscovery/gomodules/minor\"\n\n\t\tremark:\n\t\t\t* \"pipelineid\" is used to generate uniq branch name for target update relying on scm configuration.\n\t\t\t* The same \"pipelineid\" may be used by different Updatecli manifest\" to ensure they are updated in the same workflow including pullrequest."
        },
        "autodiscovery": {
            "properties": {
                "crawlers": {
                    "$schema": "http://json-schema.org/draft-04/schema",
                    "properties": {
                        "helm": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "auths": {
                                    "additionalProperties": {
                                        "properties": {
                                            "username": {
                                                "type": "string",
                                                "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "password": {
                                                "type": "string",
                                                "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "token": {
                                                "type": "string",
                                                "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "InlineKeyChain defines a keychain with OCI registry credentials"
                                    },
                                    "type": "object",
                                    "description": "auths provides a map of registry credentials where the key is the registry URL without scheme\n\t\tif empty, updatecli relies on OCI credentials such as the one used by Docker."
                                },
                                "ignorecontainer": {
                                    "type": "boolean",
                                    "description": "ignorecontainer disables OCI container tag update when set to true"
                                },
                                "ignorechartdependency": {
                                    "type": "boolean",
                                    "description": "ignorechartdependency disables Helm chart dependencies update when set to true"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore specifies rule to ignore Helm chart update."
                                },
                                "rootdir": {
                                    "type": "string",
                                    "description": "rootdir defines the root directory used to recursively search for Helm Chart"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "only specify required rule(s) to restrict Helm chart update."
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                },
                                "versionincrement": {
                                    "type": "string",
                                    "description": "[target] Defines if a Chart changes, triggers, or not, a Chart version update, accepted values is a comma separated list of \"none,major,minor,patch\""
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the Helm parameters."
                        },
                        "maven": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for Helm Chart"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore autodiscovery a specific Helm based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only autodiscover manifest for a specific Helm based on a rule"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the parameters which can be provided to the Helm builder."
                        },
                        "npm": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for npm packages.json"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a package.json path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore autodiscovery a specific NPM based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a package.json path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only autodiscover manifest for a specific NPM based on a rule"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the parameters which can be provided to the NPM builder."
                        },
                        "rancher/fleet": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for Fleet bundle"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Fleet bundle path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore autodiscovery a specific Fleet bundle based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Fleet bundle path pattern, the pattern requires to match all of name, not just a substring."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only autodiscover manifest for a specific Fleet bundle based on a rule"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the parameters which can be provided to the fleet builder."
                        },
                        "cargo": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for Cargo.toml"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Cargo crate path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore specifies rule to ignore Cargo.toml update."
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Cargo crate path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only specify required rule to restrict Cargo.toml update."
                                },
                                "registries": {
                                    "additionalProperties": {
                                        "properties": {
                                            "auth": {
                                                "properties": {
                                                    "token": {
                                                        "type": "string",
                                                        "description": "[A][S][C] Token specifies the cargo registry token to use for authentication."
                                                    },
                                                    "headerformat": {
                                                        "type": "string",
                                                        "description": "[A][S][C] HeaderFormat specifies the cargo registry header format to use for authentication (defaults to `Bearer`)."
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "description": "[A][S][C] Auth specifies the cargo registry auth to use for authentication."
                                            },
                                            "url": {
                                                "type": "string",
                                                "description": "[A][S][C] URL specifies the cargo registry URL to use for authentication."
                                            },
                                            "rootdir": {
                                                "type": "string",
                                                "description": "[A][S][C] RootDir specifies the cargo registry root directory to use as FS index."
                                            },
                                            "scmid": {
                                                "type": "string",
                                                "description": "[A] SCMID specifies the cargo registry scmId to use as FS index."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                    },
                                    "type": "object",
                                    "description": "Auths provides a map of registry credentials where the key is the registry URL without scheme"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "`versionfilter` provides parameters to specify the version pattern to use when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the Cargo parameters."
                        },
                        "dockercompose": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for Helm Chart"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "archs": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Arch specifies a list of docker image architecture"
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "services": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Services specifies a list of docker compose services"
                                            },
                                            "images": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Image specifies a list of docker image"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore autodiscovery a specific Helm based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "archs": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Arch specifies a list of docker image architecture"
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helm chart path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "services": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Services specifies a list of docker compose services"
                                            },
                                            "images": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Image specifies a list of docker image"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only autodiscover manifest for a specific Helm based on a rule"
                                },
                                "auths": {
                                    "additionalProperties": {
                                        "properties": {
                                            "username": {
                                                "type": "string",
                                                "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "password": {
                                                "type": "string",
                                                "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "token": {
                                                "type": "string",
                                                "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "InlineKeyChain defines a keychain with OCI registry credentials"
                                    },
                                    "type": "object",
                                    "description": "Auths provides a map of registry credentials where the key is the registry URL without scheme"
                                },
                                "filematch": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "description": "FileMatch allows to override default docker-compose.yaml file matching. Default [\"docker-compose.yaml\",\"docker-compose.yml\",\"docker-compose.*.yaml\",\"docker-compose.*.yml\"]"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec is a struct fill from Updatecli manifest data and shouldn't be modified at runtime unless For Fields that requires it, we can use the struct DockerCompose Spec defines the parameters which can be provided to the Helm builder."
                        },
                        "dockerfile": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "RootDir defines the root directory used to recursively search for Helm Chart"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "archs": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Arch specifies a list of docker image architecture"
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Dockerfile path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "images": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Image specifies a list of docker image"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore autodiscovery a specific Helm based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "archs": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Arch specifies a list of docker image architecture"
                                            },
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Dockerfile path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "images": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array",
                                                "description": "Image specifies a list of docker image"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only autodiscover manifest for a specific Helm based on a rule"
                                },
                                "auths": {
                                    "additionalProperties": {
                                        "properties": {
                                            "username": {
                                                "type": "string",
                                                "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "password": {
                                                "type": "string",
                                                "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "token": {
                                                "type": "string",
                                                "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "InlineKeyChain defines a keychain with OCI registry credentials"
                                    },
                                    "type": "object",
                                    "description": "Auths provides a map of registry credentials where the key is the registry URL without scheme"
                                },
                                "filematch": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "description": "FileMatch allows to override default Dockerfile file matching. Default [\"Dockerfile\"]"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec is a struct fill from Updatecli manifest data and shouldn't be modified at runtime unless For Fields that requires it, we can use the struct Dockerfile Spec defines the parameters which can be provided to the Dockerfile crawler."
                        },
                        "golang/gomod": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "rootDir defines the root directory used to recursively search for golang go.mod"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a go.mod path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "modules": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "type": "object",
                                                "description": "Modules specifies a list of module pattern."
                                            },
                                            "goversion": {
                                                "type": "string",
                                                "description": "GoVersions specifies a list of version pattern."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "ignore allows to specify \"rule\" to ignore autodiscovery a specific go.mod rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a go.mod path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "modules": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "type": "object",
                                                "description": "Modules specifies a list of module pattern."
                                            },
                                            "goversion": {
                                                "type": "string",
                                                "description": "GoVersions specifies a list of version pattern."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "`only` allows to specify rule to \"only\" autodiscover manifest for a specific golang rule"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "`versionfilter` provides parameters to specify the version pattern to use when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the parameters which can be provided to the Golang autodiscovery builder."
                        },
                        "helmfile": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "rootdir defines the root directory used to recursively search for Helmfile manifest"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helmfile chart path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Ignore allows to specify rule to ignore \"autodiscovery\" a specific Helmfile based on a rule"
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "Path specifies a Helmfile chart path pattern, the pattern requires to match all of name, not just a subpart of the path."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "Only allows to specify rule to only \"autodiscovery\" manifest for a specific Helmfile based on a rule"
                                },
                                "auths": {
                                    "additionalProperties": {
                                        "properties": {
                                            "username": {
                                                "type": "string",
                                                "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "password": {
                                                "type": "string",
                                                "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                            },
                                            "token": {
                                                "type": "string",
                                                "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "InlineKeyChain defines a keychain with OCI registry credentials"
                                    },
                                    "type": "object",
                                    "description": "Auths provides a map of registry credentials where the key is the registry URL without scheme"
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "versionfilter provides parameters to specify the version pattern used when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the Helmfile parameters."
                        },
                        "terraform": {
                            "$schema": "http://json-schema.org/draft-04/schema",
                            "properties": {
                                "rootdir": {
                                    "type": "string",
                                    "description": "`rootdir` defines the root directory used to recursively search for `.terraform.lock.hcl`"
                                },
                                "ignore": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "`path` specifies a `.terraform.lock.hcl` path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "providers": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "type": "object",
                                                "description": "`providers` specifies a map of providers, the key is provider url as seen in the `.terraform.lock.hcl`,\n\t\tthe value is an optional semver version constraint.\n\n\t\texamples:\n\t\t```\n\t\t- providers:\n\t\t  # Ignoring provider updates for this provider\n\t\t  registry.terraform.io/hashicorp/aws:\n\t\t  # Ignore provider updates for this version\n\t\t  registry.terraform.io/hashicorp/kubernetes: \"1.x\"\n\t\t```"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "`ignore` specifies rule to ignore `.terraform.lock.hcl` update."
                                },
                                "only": {
                                    "items": {
                                        "properties": {
                                            "path": {
                                                "type": "string",
                                                "description": "`path` specifies a `.terraform.lock.hcl` path pattern, the pattern requires to match all of name, not just a substring."
                                            },
                                            "providers": {
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "type": "object",
                                                "description": "`providers` specifies a map of providers, the key is provider url as seen in the `.terraform.lock.hcl`,\n\t\tthe value is an optional semver version constraint.\n\n\t\texamples:\n\t\t```\n\t\t- providers:\n\t\t  # Ignoring provider updates for this provider\n\t\t  registry.terraform.io/hashicorp/aws:\n\t\t  # Ignore provider updates for this version\n\t\t  registry.terraform.io/hashicorp/kubernetes: \"1.x\"\n\t\t```"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "MatchingRule allows to specifies rules to identify manifest"
                                    },
                                    "type": "array",
                                    "description": "`only` specify required rule to restrict `.terraform.lock.hcl` update."
                                },
                                "versionfilter": {
                                    "properties": {
                                        "kind": {
                                            "type": "string",
                                            "description": "specifies the version kind such as semver, regex, or latest"
                                        },
                                        "pattern": {
                                            "type": "string",
                                            "description": "specifies the version pattern according the version kind"
                                        },
                                        "strict": {
                                            "type": "boolean",
                                            "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "`versionfilter` provides parameters to specify the version pattern to use when generating manifest.\n\n\t\tkind - semver\n\t\t\tversionfilter of kind `semver` uses semantic versioning as version filtering\n\t\t\tpattern accepts one of:\n\t\t\t\t`patch` - patch only update patch version\n\t\t\t\t`minor` - minor only update minor version\n\t\t\t\t`major` - major only update major versions\n\t\t\t\t`a version constraint` such as `\u003e= 1.0.0`\n\n\t\tkind - regex\n\t\t\tversionfilter of kind `regex` uses regular expression as version filtering\n\t\t\tpattern accepts a valid regular expression\n\n\t\texample:\n\t\t```\n\t\t\tversionfilter:\n\t\t\t\tkind: semver\n\t\t\t\tpattern: minor\n\t\t```\n\n\t\tand its type like regex, semver, or just latest."
                                },
                                "platforms": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array",
                                    "description": "`platforms` is the target platforms to request package checksums for.\n\n\t\tremarks:\n\t\t* Fallback is linux_amd64, linux_arm64, darwin_amd64, darwin_arm64"
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "Spec defines the Terraform parameters."
                        }
                    },
                    "type": "object",
                    "description": "Crawlers defines a map of crawler configuration where the key represent the crawler type"
                },
                "scmid": {
                    "type": "string",
                    "description": "scmid is a unique identifier used to retrieve the scm configuration from the configuration file."
                },
                "actionid": {
                    "type": "string",
                    "description": "actionid is a unique identifier used to retrieve the action configuration from the configuration file."
                },
                "groupby": {
                    "type": "string",
                    "description": "groupby specifies how to group pipeline. The Accepted is one of \"all\", \"individual\". Default is \"all\"\n\n\t\tdefault:\n\t\t\tall"
                },
                "pullrequestid": {
                    "type": "string",
                    "description": "!Deprecated in favor of `actionid`"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "\"autodiscovery\" defines the configuration to automatically discover new versions update.\n\n\t\texample:\n\t\t---\n\t\tautodiscovery:\n\t\t\tscmid: default\n\t\t\tactionid:  default\n\t\t\tgroupby: all\n\t\t\tcrawlers:\n\t\t\t\tgolang/gomod:\n\t\t\t\t\tversionfilter:\n\t\t\t\t\tkind: semver\n\t\t\t\t\tpattern: patch\n\t\t---"
        },
        "title": {
            "type": "string",
            "description": "\"title\" is deprecated, please use \"name\" instead."
        },
        "actions": {
            "additionalProperties": {
                "oneOf": [
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "kind": {
                                "enum": [
                                    "github/pullrequest"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "automerge": {
                                        "type": "boolean",
                                        "description": "Specifies if automerge is enabled for the new pullrequest"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Specifies the Pull Request title"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "Specifies user input description used during pull body creation"
                                    },
                                    "labels": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Specifies repository labels used for the Pull Request. !! Labels must already exist on the repository"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "Specifies if a Pull Request is set to draft, default false"
                                    },
                                    "maintainercannotmodify": {
                                        "type": "boolean",
                                        "description": "Specifies if maintainer can modify pullRequest"
                                    },
                                    "mergemethod": {
                                        "type": "string",
                                        "description": "Specifies which merge method is used to incorporate the Pull Request. Accept \"merge\", \"squash\", \"rebase\", or \"\""
                                    },
                                    "usetitleforautomerge": {
                                        "type": "boolean",
                                        "description": "Specifies to use the Pull Request title as commit message when using auto merge, only works for \"squash\" or \"rebase\""
                                    },
                                    "parent": {
                                        "type": "boolean",
                                        "description": "Specifies if a Pull Request should be sent to the parent of a fork."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "ActionSpec specifies the configuration of an action of type \"GitHub Pull Request\""
                            },
                            "scmid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/pullrequest"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "sourcebranch": {
                                        "type": "string",
                                        "description": "\"sourcebranch\" defines the branch name used as a source to create the Gitea pullrequest.\n\n\t\tdefault:\n\t\t\t\"sourcebranch\" inherits the value from the scm branch if a scm of kind \"gitea\" is specified by the action.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "targetbranch": {
                                        "type": "string",
                                        "description": "\"targetbranch\" defines the branch name used as a target to create the Gitea pullrequest.\n\n\t\tdefault:\n\t\t\t\"targetbranch\" inherits the value from the scm working branch if a scm of kind \"gitea\" is specified by the action.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default.\n\t\t\tthe Gitea scm will create and use a working branch such as updatecli_xxxx"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the Gitea repository owner.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "\"repository\" defines the Gitea repository for a specific owner\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "\"title\" defines the Gitea pullrequest title\n\n\t\tdefault:\n\t\t\tA Gitea pullrequest title is defined by one of the following location (first match)\n\t\t\t\t1. title is defined by the spec such as:\n\n\t\t\t\t\tactions:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tkind: gitea/pullrequest\n\t\t\t\t\t\t\tscmid: default\n\t\t\t\t\t\t\tspec:\n\t\t\t\t\t\t\t\ttitle: This is my awesome title\n\n\t\t\t\t2. title is defined by the action such as:\n\n\t\t\t\t\tactions:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tkind: gitea/pullrequest\n\t\t\t\t\t\t\tscmid default\n\t\t\t\t\t\t\ttitle: This is my awesome title\n\n\t\t\t\t3. title is defined by the first associated target title\n\n\t\t\t\t4. title is defined by the pipeline title\n\n\t\tremark:\n\t\t\tusually we prefer to go with option 2"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "\"body\" defines a custom body pullrequest.\n\n\t\tdefault:\n\t\t\tBy default a pullrequest body is generated out of a pipeline execution.\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, you shouldn't set this value and rely on the sane default.\n\t\t\t\"body\" is useful to provide additional information when reviewing pullrequest, such as changelog url."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea pullrequest It's a mapping of user input from a Updatecli manifest and it shouldn't modified"
                            },
                            "scmid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "kind": {
                                "enum": [
                                    "stash/pullrequest"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "Repository specifies the name of a repository for a specific owner"
                                    },
                                    "sourcebranch": {
                                        "type": "string",
                                        "description": "SourceBranch specifies the pullrequest source branch"
                                    },
                                    "targetbranch": {
                                        "type": "string",
                                        "description": "TargetBranch specifies the pullrequest target branch"
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "Title defines the Bitbucket pullrequest title."
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "Body defines the Bitbucket pullrequest body"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket pullrequest It's a mapping of user input from a Updatecli manifest and it shouldn't modified"
                            },
                            "scmid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "title": {
                                "type": "string"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/mergerequest"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "sourcebranch": {
                                        "type": "string",
                                        "description": "\"sourcebranch\" defines the branch name used as a source to create the GitLab mergerequest.\n\n\t\tdefault:\n\t\t\t\"sourcebranch\" inherits the value from the scm branch if a scm of kind \"gitlab\" is specified by the action.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "targetbranch": {
                                        "type": "string",
                                        "description": "\"targetbranch\" defines the branch name used as a target to create the GitLab mergerequest.\n\n\t\tdefault:\n\t\t\t\"targetbranch\" inherits the value from the scm working branch if a scm of kind \"gitlab\" is specified by the action.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default.\n\t\t\tthe GitLab scm will create and use a working branch such as updatecli_xxxx"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the GitLab repository owner.\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "\"repository\" defines the GitLab repository for a specific owner\n\n\t\tremark:\n\t\t\tunless you know what you are doing, you shouldn't set this value and rely on the scmid to provide the sane default."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "\"title\" defines the GitLab mergerequest title\n\n\t\tdefault:\n\t\t\tA GitLab mergerequest title is defined by one of the following location (first match)\n\t\t\t\t1. title is defined by the spec such as:\n\n\t\t\t\t\tactions:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tkind: gitlab/mergerequest\n\t\t\t\t\t\t\tscmid: default\n\t\t\t\t\t\t\tspec:\n\t\t\t\t\t\t\t\ttitle: This is my awesome title\n\n\t\t\t\t2. title is defined by the action such as:\n\n\t\t\t\t\tactions:\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tkind: gitlab/mergerequest\n\t\t\t\t\t\t\tscmid default\n\t\t\t\t\t\t\ttitle: This is my awesome title\n\n\t\t\t\t3. title is defined by the first associated target title\n\n\t\t\t\t4. title is defined by the pipeline title\n\n\t\tremark:\n\t\t\tusually we prefer to go with option 2"
                                    },
                                    "body": {
                                        "type": "string",
                                        "description": "\"body\" defines a custom mergerequest body\n\n\t\tdefault:\n\t\t\tBy default a mergerequest body is generated out of a pipeline execution.\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, you shouldn't set this value and rely on the sane default.\n\t\t\t\"body\" is useful to provide additional information when reviewing mergerequest, such as changelog url."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines settings used to interact with GitLab pullrequest It's a mapping of user input from a Updatecli manifest and it shouldn't modified"
                            },
                            "scmid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    }
                ]
            },
            "type": "object",
            "description": "\"actions\" defines the list of action configurations which need to be managed.\n\n\t\texamples:\n\t\t---\n\t\tactions:\n\t\t\tdefault:\n\t\t\t\tkind: github/pullrequest\n\t\t\t\tscmid: default\n\t\t\t\tspec:\n\t\t\t\t\tautomerge: true\n\t\t\t\t\tlabels:\n\t\t\t\t\t\t- \"dependencies\"\n\t\t---"
        },
        "scms": {
            "additionalProperties": {
                "oneOf": [
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "kind": {
                                "enum": [
                                    "github"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "branch": {
                                        "type": "string",
                                        "description": "\"branch\" defines the git branch to work on.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tmain\n\n\t\tremark:\n\t\t\tdepending on which resource references the GitHub scm, the behavior will be different.\n\n\t\t\tIf the scm is linked to a source or a condition (using scmid), the branch will be used to retrieve\n\t\t\tfile(s) from that branch.\n\n\t\t\tIf the scm is linked to target then Updatecli creates a new \"working branch\" based on the branch value.\n\t\t\tThe working branch created by Updatecli looks like \"updatecli_\u003cpipelineID\u003e\".\n\t\t\tIt is worth mentioning that it is not possible to by pass the working branch in the current situation.\n\t\t\tFor more information, please refer to the following issue:\n\t\t\thttps://github.com/updatecli/updatecli/issues/1139\n\n\t\t\tIf you need to push changes to a specific branch, you must use the plugin \"git\" instead of this"
                                    },
                                    "directory": {
                                        "type": "string",
                                        "description": "\"directory\" defines the local path where the git repository is cloned.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, it is recommended to use the default value.\n\t\t\tThe reason is that Updatecli may automatically clean up the directory after a pipeline execution.\n\n\t\tdefault:\n\t\t\t/tmp/updatecli/github/\u003cowner\u003e/\u003crepository\u003e"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "\"email\" defines the email used to commit changes.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tdefault set to your global git configuration"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the owner of a repository.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "repository specifies the name of a repository for a specific owner.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with GitHub API.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "url specifies the default github url in case of GitHub enterprise\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tgithub.com"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" specifies the username used to authenticate with GitHub API.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tthe token is usually enough to authenticate with GitHub API."
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "\"user\" specifies the user associated with new git commit messages created by Updatecli\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "gpg": {
                                        "properties": {
                                            "signingkey": {
                                                "type": "string",
                                                "description": "signingKey defines the gpg key used to sign the commit message\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "passphrase": {
                                                "type": "string",
                                                "description": "passphrase defines the gpg passphrase used to sign the commit message"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"gpg\" specifies the GPG key and passphrased used for commit signing\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "\"force\" is used during the git push phase to run `git push --force`.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tfalse"
                                    },
                                    "commitmessage": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "\"type\" defines the type of commit message such as \"chore\", \"fix\", \"feat\", etc. as\n\t\tdefined by the conventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\t* chore"
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "\"scope\" defines the scope of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "footers": {
                                                "type": "string",
                                                "description": "footers defines the footer of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "\"title\" defines the title of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tdefault is set to the target name or the target short description\n\t\t\tif the name is not defined."
                                            },
                                            "body": {
                                                "type": "string",
                                                "description": "\"body\" defines the commit body of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "hidecredit": {
                                                "type": "boolean",
                                                "description": "\"hideCredit\" defines if updatecli credits should be displayed inside commit message body\n\n\t\tplease consider sponsoring the Updatecli project if you want to disable credits.\n\t\t-\u003e https://github.com/updatecli/updatecli\n\n\t\tdefault:\n\t\t\tfalse"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"commitMessage\" is used to generate the final commit message.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tit's worth mentioning that the commit message settings is applied to all targets linked to the same scm."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository",
                                    "token"
                                ],
                                "description": "Spec represents the configuration input"
                            },
                            "disabled": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "kind": {
                                "enum": [
                                    "gitlab"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "commitmessage": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "\"type\" defines the type of commit message such as \"chore\", \"fix\", \"feat\", etc. as\n\t\tdefined by the conventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\t* chore"
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "\"scope\" defines the scope of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "footers": {
                                                "type": "string",
                                                "description": "footers defines the footer of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "\"title\" defines the title of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tdefault is set to the target name or the target short description\n\t\t\tif the name is not defined."
                                            },
                                            "body": {
                                                "type": "string",
                                                "description": "\"body\" defines the commit body of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "hidecredit": {
                                                "type": "boolean",
                                                "description": "\"hideCredit\" defines if updatecli credits should be displayed inside commit message body\n\n\t\tplease consider sponsoring the Updatecli project if you want to disable credits.\n\t\t-\u003e https://github.com/updatecli/updatecli\n\n\t\tdefault:\n\t\t\tfalse"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"commitMessage\" is used to generate the final commit message.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tit's worth mentioning that the commit message settings is applied to all targets linked to the same scm."
                                    },
                                    "directory": {
                                        "type": "string",
                                        "description": "\"directory\" defines the local path where the git repository is cloned.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, it is recommended to use the default value.\n\t\t\tThe reason is that Updatecli may automatically clean up the directory after a pipeline execution.\n\n\t\tdefault:\n\t\t\t/tmp/updatecli/gitlab/\u003cowner\u003e/\u003crepository\u003e"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "\"email\" defines the email used to commit changes.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tdefault set to your global git configuration"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "\"force\" is used during the git push phase to run `git push --force`.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tfalse"
                                    },
                                    "gpg": {
                                        "properties": {
                                            "signingkey": {
                                                "type": "string",
                                                "description": "signingKey defines the gpg key used to sign the commit message\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "passphrase": {
                                                "type": "string",
                                                "description": "passphrase defines the gpg passphrase used to sign the commit message"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"gpg\" specifies the GPG key and passphrased used for commit signing\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the owner of a repository.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "repository specifies the name of a repository for a specific owner.\n\n\t\tcompatible:\n\t\t\t* action\n\t\t\t* scm"
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "\"user\" specifies the user associated with new git commit messages created by Updatecli\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "\"branch\" defines the git branch to work on.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tmain\n\n\t\tremark:\n\t\t\tdepending on which resource references the GitLab scm, the behavior will be different.\n\n\t\t\tIf the scm is linked to a source or a condition (using scmid), the branch will be used to retrieve\n\t\t\tfile(s) from that branch.\n\n\t\t\tIf the scm is linked to target then Updatecli creates a new \"working branch\" based on the branch value.\n\t\t\tThe working branch created by Updatecli looks like \"updatecli_\u003cpipelineID\u003e\".\n\t\t\tIt is worth mentioning that it is not possible to bypass the working branch in the current situation.\n\t\t\tFor more information, please refer to the following issue:\n\t\t\thttps://github.com/updatecli/updatecli/issues/1139\n\n\t\t\tIf you need to push changes to a specific branch, you must use the plugin \"git\" instead of this"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "disabled": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "kind": {
                                "enum": [
                                    "stash"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the owner of a repository.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "repository specifies the name of a repository for a specific owner.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "commitmessage": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "\"type\" defines the type of commit message such as \"chore\", \"fix\", \"feat\", etc. as\n\t\tdefined by the conventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\t* chore"
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "\"scope\" defines the scope of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "footers": {
                                                "type": "string",
                                                "description": "footers defines the footer of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "\"title\" defines the title of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tdefault is set to the target name or the target short description\n\t\t\tif the name is not defined."
                                            },
                                            "body": {
                                                "type": "string",
                                                "description": "\"body\" defines the commit body of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "hidecredit": {
                                                "type": "boolean",
                                                "description": "\"hideCredit\" defines if updatecli credits should be displayed inside commit message body\n\n\t\tplease consider sponsoring the Updatecli project if you want to disable credits.\n\t\t-\u003e https://github.com/updatecli/updatecli\n\n\t\tdefault:\n\t\t\tfalse"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"commitMessage\" is used to generate the final commit message.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tit's worth mentioning that the commit message settings is applied to all targets linked to the same scm."
                                    },
                                    "directory": {
                                        "type": "string",
                                        "description": "\"directory\" defines the local path where the git repository is cloned.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, it is recommended to use the default value.\n\t\t\tThe reason is that Updatecli may automatically clean up the directory after a pipeline execution.\n\n\t\tdefault:\n\t\t\t/tmp/updatecli/github/\u003cowner\u003e/\u003crepository\u003e"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "\"email\" defines the email used to commit changes.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tdefault set to your global git configuration"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "\"force\" is used during the git push phase to run `git push --force`.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "gpg": {
                                        "properties": {
                                            "signingkey": {
                                                "type": "string",
                                                "description": "signingKey defines the gpg key used to sign the commit message\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "passphrase": {
                                                "type": "string",
                                                "description": "passphrase defines the gpg passphrase used to sign the commit message"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"gpg\" specifies the GPG key and passphrased used for commit signing\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "\"user\" specifies the user associated with new git commit messages created by Updatecli\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "\"branch\" defines the git branch to work on.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tmain\n\n\t\tremark:\n\t\t\tdepending on which resource references the Stash scm, the behavior will be different.\n\n\t\t\tIf the scm is linked to a source or a condition (using scmid), the branch will be used to retrieve\n\t\t\tfile(s) from that branch.\n\n\t\t\tIf the scm is linked to target then Updatecli creates a new \"working branch\" based on the branch value.\n\t\t\tThe working branch created by Updatecli looks like \"updatecli_\u003cpipelineID\u003e\".\n\t\t\tIt is worth mentioning that it is not possible to bypass the working branch in the current situation.\n\t\t\tFor more information, please refer to the following issue:\n\t\t\thttps://github.com/updatecli/updatecli/issues/1139\n\n\t\t\tIf you need to push changes to a specific branch, you must use the plugin \"git\" instead of this"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "disabled": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "kind": {
                                "enum": [
                                    "git"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" specifies the git url\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\texample:\n\t\t\t* git@github.com:updatecli/updatecli.git\n\t\t\t* https://github.com/updatecli/updatecli.git\n\n\t\tremarks:\n\t\t\twhen using the ssh protocol, the user must have the right to clone the repository\n\t\t\tbased on its local ssh configuration"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" specifies the username when using the HTTP protocol\n\n\t\tcompatible\n\t\t\t* scm"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "\"password\" specifies the password when using the HTTP protocol\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "\"branch\" defines the git branch to work on.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tmain\n\n\t\tremark:\n\t\t\tdepending on which resource references the GitHub scm, the behavior will be different.\n\n\t\t\tIf the scm is linked to a source or a condition (using scmid), the branch will be used to retrieve\n\t\t\tfile(s) from that branch.\n\n\t\t\tIf the scm is linked to target then Updatecli will push any changes to that branch\n\n\t\t\tFor more information, please refer to the following issue:\n\t\t\thttps://github.com/updatecli/updatecli/issues/1139"
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "\"user\" specifies the user associated with new git commit messages created by Updatecli\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "\"email\" defines the email used to commit changes.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tdefault set to your global git configuration"
                                    },
                                    "directory": {
                                        "type": "string",
                                        "description": "\"directory\" defines the local path where the git repository is cloned.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, it is recommended to use the default value.\n\t\t\tThe reason is that Updatecli may automatically clean up the directory after a pipeline execution.\n\n\t\tdefault:\n\t\t\t/tmp/updatecli/\u003curl\u003e"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "\"force\" is used during the git push phase to run `git push --force`.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "commitmessage": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "\"type\" defines the type of commit message such as \"chore\", \"fix\", \"feat\", etc. as\n\t\tdefined by the conventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\t* chore"
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "\"scope\" defines the scope of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "footers": {
                                                "type": "string",
                                                "description": "footers defines the footer of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "\"title\" defines the title of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tdefault is set to the target name or the target short description\n\t\t\tif the name is not defined."
                                            },
                                            "body": {
                                                "type": "string",
                                                "description": "\"body\" defines the commit body of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "hidecredit": {
                                                "type": "boolean",
                                                "description": "\"hideCredit\" defines if updatecli credits should be displayed inside commit message body\n\n\t\tplease consider sponsoring the Updatecli project if you want to disable credits.\n\t\t-\u003e https://github.com/updatecli/updatecli\n\n\t\tdefault:\n\t\t\tfalse"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"commitMessage\" is used to generate the final commit message.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tit's worth mentioning that the commit message is applied to all targets linked to the same scm.\n\n\t\tdefault:\n\t\t\tfalse"
                                    },
                                    "gpg": {
                                        "properties": {
                                            "signingkey": {
                                                "type": "string",
                                                "description": "signingKey defines the gpg key used to sign the commit message\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "passphrase": {
                                                "type": "string",
                                                "description": "passphrase defines the gpg passphrase used to sign the commit message"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"gpg\" specifies the GPG key and passphrased used for commit signing\n\n\t\tcompatible:\n\t\t\t* scm"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url"
                                ],
                                "description": "Spec contains settings to manipulate a git repository."
                            },
                            "disabled": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "kind": {
                                "enum": [
                                    "gitea"
                                ]
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "commitmessage": {
                                        "properties": {
                                            "type": {
                                                "type": "string",
                                                "description": "\"type\" defines the type of commit message such as \"chore\", \"fix\", \"feat\", etc. as\n\t\tdefined by the conventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\t* chore"
                                            },
                                            "scope": {
                                                "type": "string",
                                                "description": "\"scope\" defines the scope of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "footers": {
                                                "type": "string",
                                                "description": "footers defines the footer of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "title": {
                                                "type": "string",
                                                "description": "\"title\" defines the title of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tdefault is set to the target name or the target short description\n\t\t\tif the name is not defined."
                                            },
                                            "body": {
                                                "type": "string",
                                                "description": "\"body\" defines the commit body of the commit message as defined by the\n\t\tconventional commit specification. More information on\n\t\t-\u003e https://www.conventionalcommits.org/en/\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "hidecredit": {
                                                "type": "boolean",
                                                "description": "\"hideCredit\" defines if updatecli credits should be displayed inside commit message body\n\n\t\tplease consider sponsoring the Updatecli project if you want to disable credits.\n\t\t-\u003e https://github.com/updatecli/updatecli\n\n\t\tdefault:\n\t\t\tfalse"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"commitMessage\" is used to generate the final commit message.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tit's worth mentioning that the commit message settings is applied to all targets linked to the same scm."
                                    },
                                    "directory": {
                                        "type": "string",
                                        "description": "\"directory\" defines the local path where the git repository is cloned.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tremark:\n\t\t\tUnless you know what you are doing, it is recommended to use the default value.\n\t\t\tThe reason is that Updatecli may automatically clean up the directory after a pipeline execution.\n\n\t\tdefault:\n\t\t\t/tmp/updatecli/github/\u003cowner\u003e/\u003crepository\u003e"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "\"email\" defines the email used to commit changes.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tdefault set to your global git configuration"
                                    },
                                    "force": {
                                        "type": "boolean",
                                        "description": "\"force\" is used during the git push phase to run `git push --force`.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "gpg": {
                                        "properties": {
                                            "signingkey": {
                                                "type": "string",
                                                "description": "signingKey defines the gpg key used to sign the commit message\n\n\t\tdefault:\n\t\t\tnone"
                                            },
                                            "passphrase": {
                                                "type": "string",
                                                "description": "passphrase defines the gpg passphrase used to sign the commit message"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"gpg\" specifies the GPG key and passphrased used for commit signing\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "\"owner\" defines the owner of a repository.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "repository specifies the name of a repository for a specific owner.\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "\"user\" specifies the user associated with new git commit messages created by Updatecli\n\n\t\tcompatible:\n\t\t\t* scm"
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "\"branch\" defines the git branch to work on.\n\n\t\tcompatible:\n\t\t\t* scm\n\n\t\tdefault:\n\t\t\tmain\n\n\t\tremark:\n\t\t\tdepending on which resource references the Gitea scm, the behavior will be different.\n\n\t\t\tIf the scm is linked to a source or a condition (using scmid), the branch will be used to retrieve\n\t\t\tfile(s) from that branch.\n\n\t\t\tIf the scm is linked to target then Updatecli creates a new \"working branch\" based on the branch value.\n\t\t\tThe working branch created by Updatecli looks like \"updatecli_\u003cpipelineID\u003e\".\n\t\t\tIt is worth mentioning that it is not possible to bypass the working branch in the current situation.\n\t\t\tFor more information, please refer to the following issue:\n\t\t\thttps://github.com/updatecli/updatecli/issues/1139\n\n\t\t\tIf you need to push changes to a specific branch, you must use the plugin \"git\" instead of this"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "disabled": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    }
                ]
            },
            "type": "object",
            "description": "\"scms\" defines the list of repository configuration used to fetch content from.\n\n\t\texamples:\n\t\t---\n\t\tscms:\n\t\t\tdefault:\n\t\t\t\tkind: github\n\t\t\t\tspec:\n\t\t\t\t\towner: \"updatecli\"\n\t\t\t\t\trepository: \"updatecli\"\n\t\t\t\t\ttoken: \"${{ env \"GITHUB_TOKEN\" }}\"\n\t\t\t\t\tbranch: \"main\"\n\t\t---"
        },
        "sources": {
            "additionalProperties": {
                "oneOf": [
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/module"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "proxy": {
                                        "type": "string",
                                        "description": "Proxy may have the schemes https, http. file is not supported at this time. If a URL has no scheme, https is assumed\n[S][C] Proxy allows to override GO proxy similarly to GOPROXY environment variable."
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "[S][C] Module specifies the name of the module"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "module"
                                ],
                                "description": "Spec defines a specification for a \"gomodule\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "hcl"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/registry"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "\"type\" defines the type registry request to look up.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tSupported values: module, provider"
                                    },
                                    "hostname": {
                                        "type": "string",
                                        "description": "\"hostname\" the hostname of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Optional\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "\"namespace\" the namespace of the provider or module\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "\"name\" the name of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "targetsystem": {
                                        "type": "string",
                                        "description": "\"targetsystem\" the target system for the module in registry\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required for type module unless using rawstring\n\t\t\t* Not allowed with rawstring\n\t\t\t* Applicable for module."
                                    },
                                    "rawstring": {
                                        "type": "string",
                                        "description": "\"rawstring\" provider reference to registry in single string.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tExamples:\n\t\t\t* hashicorp/kubernetes\n\t\t\t* registry.terraform.io/hashicorp/kubernetes\n\t\t\t* terraform-aws-modules/vpc/aws\n\t\t\t* app.terraform.io/terraform-aws-modules/vpc/aws\n\n\t\tremark:\n\t\t\t* Applicable for module and provider.\n\t\t\t* Not allowed with hostname, namespace, name, and targetsystem."
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "\"version\" defines a specific version to be used during condition check.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "aws/ami"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "accesskey": {
                                        "type": "string",
                                        "description": "accesskey specifies the aws access key which combined with `secretkey`, is one of the way to authenticate"
                                    },
                                    "secretkey": {
                                        "type": "string",
                                        "description": "secretkey specifies the aws secret key which combined with `accesskey`, is one of the way to authenticate"
                                    },
                                    "filters": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name specifies a filter name."
                                                },
                                                "values": {
                                                    "type": "string",
                                                    "description": "Values specifies a filter value for a specific filter name."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "description": "Filter represents the updatecli configuration describing AMI filters."
                                        },
                                        "type": "array",
                                        "description": "Filters specifies a list of AMI filters"
                                    },
                                    "region": {
                                        "type": "string",
                                        "description": "Region specifies the AWS region to use when looking for AMI"
                                    },
                                    "endpoint": {
                                        "type": "string",
                                        "description": "Endpoint specifies the AWS endpoint to use when looking for AMI"
                                    },
                                    "dryrun": {
                                        "type": "boolean",
                                        "description": "Dryrun allows to Check whether you have the required permissions for the action."
                                    },
                                    "sortby": {
                                        "type": "string",
                                        "description": "Sortby specifies the order of AMI-ID that will be used to retrieve the last element such as `creationdateasc`"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec contains the updatecli configuration provided by users."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "githubrelease"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "owner": {
                                        "type": "string",
                                        "description": "[s][c] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[s][c] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[s][c] Token specifies the credential used to authenticate with"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "[s][c] URL specifies the default github url in case of GitHub enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[s][c] Username specifies the username used to authenticate with GitHub API"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "typefilter": {
                                        "properties": {
                                            "draft": {
                                                "type": "boolean",
                                                "description": "\"Draft\" enable/disable GitHub draft release"
                                            },
                                            "prerelease": {
                                                "type": "boolean",
                                                "description": "\"PreRelease\" enable/disable GitHub PreRelease"
                                            },
                                            "release": {
                                                "type": "boolean",
                                                "description": "\"Release\" enable/disable GitHub release"
                                            },
                                            "latest": {
                                                "type": "boolean",
                                                "description": "\"Latest\" if set to true will only filter the release flag as latest."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s][c] TypeFilter specifies the GitHub Release type to retrieve before applying the versionfilter rule"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[c] Tag allows to check for a specific release tag, default to source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository",
                                    "token"
                                ],
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] owner specifies the repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T] repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] title defines the Gitea release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] tag defines the Gitea release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Version defines a specific golang version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "toml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the toml file to manipulate"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the query to retrieve an information from a toml file"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Value specifies the value for a specific key. Default to source output"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "createmissingkey": {
                                        "type": "boolean",
                                        "description": "[t] CreateMissingKey allows non-existing keys. If the key does not exist, the key is created if AllowsMissingKey\n\t  is true, otherwise an error is raised (the default).\n\t  Only supported if Key is used"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "xml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" define the xml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the xpath query used for retrieving value from a XML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: \"/project/parent/version\"\n\t\t\t* path: \"//breakfast_menu/food[0]/name\"\n\t\t\t* path: \"//book[@category='WEB']/title\""
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a xpath query.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used from a condition or a target, the default value is set to linked source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"xml\" defines the specification for manipulating \"xml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T]Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] Title defines the GitLab release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] Tag defines the GitLab release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] Commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] Description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] Draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] Prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/gomod"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File defines the go.mod file, default to \"go.mod\""
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "Module defines the module path"
                                    },
                                    "indirect": {
                                        "type": "boolean",
                                        "description": "Indirect specifies if we manipulate an indirect dependency"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Version Defines a specific golang version"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "jenkins"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "release": {
                                        "type": "string",
                                        "description": "[s][c] Defines the release name. It accepts \"stable\" or \"weekly\""
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[s][c] Defines a specific release version (condition only)"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"jenkins\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "npm"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Defines the specific npm package name"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Defines a specific package version"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "URL defines the registry url (defaults to `https://registry.npmjs.org/`)"
                                    },
                                    "registrytoken": {
                                        "type": "string",
                                        "description": "RegistryToken defines the token to use when connection to the registry"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "npmrcpath": {
                                        "type": "string",
                                        "description": "NpmrcPath defines the path to the .npmrc file"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an Npm package parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "helmchart"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "file defines the Helm Chart file to update.\n\t\tthe path must be relative to chart root directory\n\t\tthe chart name is defined by the parameter \"name\"\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"values.yaml\""
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "key defines the yamlpath query used for retrieving value from a YAML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* key: $.image.tag\n\t\t\t* key: $.images[0].tag\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "name defines the Chart name path like 'stable/chart'.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* name: stable/chart\n\n\t\tremark:\n\t\t\t* when used with a scm, the name must be the relative path from the scm repository root directory\n\t\t\t  with such as \"stable/chart\""
                                    },
                                    "skippackaging": {
                                        "type": "boolean",
                                        "description": "skippackaging defines if a Chart should be packaged or not.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault: false"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "url defines the Chart location URL.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\texample:\n\t\t\t* index.yaml\n\t\t\t* file://./index.yaml\n\t\t\t* https://github.com/updatecli/charts.git\n\t\t\t* oci://ghcr.io/olblak/charts/"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "value is the value associated with a yamlpath query.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "version defines the Chart version. It is used by condition to check if a version exists on the registry.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionincrement": {
                                        "type": "string",
                                        "description": "versionIncrement defines if a Chart changes, triggers, or not, a Chart version update, accepted values is a comma separated list of \"none,major,minor,patch,auto\".\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"minor\"\n\n\t\tremark:\n\t\t\twhen multiple pipelines update the same chart, the versionIncrement will be applied multiple times.\n\t\t\tmore information on https://github.com/updatecli/updatecli/issues/693"
                                    },
                                    "appversion": {
                                        "type": "boolean",
                                        "description": "AppVersion defines if a Chart changes, triggers, or not, a Chart AppVersion update.\n\t\tThe value is retrieved from the source input.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault\n\t\t\tfalse"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "versionfilter provides parameters to specify version pattern and its type like 'regex', 'semver', or just 'latest'.\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tsemver\n\n\t\tremark:\n\t\t\t* Helm chart uses semver by default."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an \"helmchart\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "maven"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "Deprecated, please specify the Maven url in the repository"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "Specifies the maven repository url + name"
                                    },
                                    "repositories": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Repositories specifies a list of Maven repository where to look for version. Order matter, version is retrieve from the first repository with the last one being Maven Central."
                                    },
                                    "groupid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact groupID"
                                    },
                                    "artifactid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact artifactID"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"maven\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "cargopackage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "registry": {
                                        "properties": {
                                            "auth": {
                                                "properties": {
                                                    "token": {
                                                        "type": "string",
                                                        "description": "[A][S][C] Token specifies the cargo registry token to use for authentication."
                                                    },
                                                    "headerformat": {
                                                        "type": "string",
                                                        "description": "[A][S][C] HeaderFormat specifies the cargo registry header format to use for authentication (defaults to `Bearer`)."
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "description": "[A][S][C] Auth specifies the cargo registry auth to use for authentication."
                                            },
                                            "url": {
                                                "type": "string",
                                                "description": "[A][S][C] URL specifies the cargo registry URL to use for authentication."
                                            },
                                            "rootdir": {
                                                "type": "string",
                                                "description": "[A][S][C] RootDir specifies the cargo registry root directory to use as FS index."
                                            },
                                            "scmid": {
                                                "type": "string",
                                                "description": "[A] SCMID specifies the cargo registry scmId to use as FS index."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] Registry specifies the registry to use"
                                    },
                                    "package": {
                                        "type": "string",
                                        "description": "[S][C] Package specifies the name of the package"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "package"
                                ],
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "csv"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the csv file"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv query"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv value, default to source output"
                                    },
                                    "comma": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv separator character, default \",\""
                                    },
                                    "comment": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv comment character, default \"#\""
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s]VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitbranch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "[s][c][t] Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[c][t] Specify branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gitbranch\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Gitea tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Bitbucket tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/provider"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/provider\" defines the specification for manipulating providers in terraform files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerdigest"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architecture": {
                                        "type": "string",
                                        "description": "architecture specifies the container image architecture such as `amd64`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tamd64"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "image specifies the container image such as `updatecli/updatecli`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "tag specifies the container image tag such as `latest`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "digest": {
                                        "type": "string",
                                        "description": "digest specifies the container image digest such as `sha256:ce782db15ab5491c6c6178da8431b3db66988ccd11512034946a9667846952a6`\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tWhen used from a condition, the default value is set to the linked source output."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "hidetag": {
                                        "type": "boolean",
                                        "description": "hideTag specifies if the tag should be hidden from the digest\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerdigest\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the GitLab tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "json"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the Json file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of Json files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the Jsonpath key to manipulate.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of Jsonpath accepts keys.\n\t\t\t* key accepts Dasel query, more information on https://github.com/tomwright/dasel\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: name\n\t\t\t* file: https://nodejs.org/dist/index.json\n\t\t\t  key: .(lts!=false).version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" defines the Jsonpath key value to manipulate. Default to source output.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used for a condition or a target, the default value is the output of the source."
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key\n\n\t\t\"query\" defines the Jsonpath query to manipulate. It accepts advanced Dasel query\n\t\tthe goal is to retrieve a list of values and then filter them with versionfilter.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* query: .name\n\t\t\t* query: \".[*].tag_name\"\n\n\t\tremark:\n\t\t\t* query accepts Dasel query, more information on https://github.com/tomwright/dasel"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"json\" defines the specification for manipulating \"json\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gittag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "Message associated to the git tag"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "Key of the tag object to retrieve, default is tag \"name\" filters are always against tag name, this only controls the output; Current options are 'name' and 'hash'."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "shell"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "command": {
                                        "type": "string",
                                        "description": "command specifies the shell command to execute by Updatecli"
                                    },
                                    "environments": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name defines the environment variable name"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "Value defines the environment variable value"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "name"
                                            ],
                                            "description": "Environment is a struct containing information for an environment variable such as its name and its value"
                                        },
                                        "type": "array",
                                        "description": "environments allows to pass environment variable(s) to the shell script. By default no environment variable are shared."
                                    },
                                    "changedif": {
                                        "oneOf": [
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "console/output"
                                                        ]
                                                    },
                                                    "spec": true
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "exitcode"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "warning": {
                                                                "type": "integer",
                                                                "description": "Warning defines the command exit code used by Updatecli to identify a change need. Default to 2 if no exitcode have been specified"
                                                            },
                                                            "success": {
                                                                "type": "integer",
                                                                "description": "Success defines the command exit code used by Updatecli to identify no changes are needed. Default to 0 if no exitcode have been specified"
                                                            },
                                                            "failure": {
                                                                "type": "integer",
                                                                "description": "Failure defines the command exit code used by Updatecli to identify that something went wrong. Default to 1 if no exitcode have been specified"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "warning",
                                                            "success",
                                                            "failure"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "file/checksum"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "files": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "description": "Files specifies the list of file that Updatecli monitors to identify state change"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "files"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            }
                                        ],
                                        "description": "ChangedIf defines how to interpreted shell command success criteria. What a success means, what an error means, and what a warning would mean"
                                    },
                                    "shell": {
                                        "type": "string",
                                        "description": "Shell specifies which shell interpreter to use. Default to powershell(Windows) and \"/bin/sh\" (Darwin/Linux)"
                                    },
                                    "workdir": {
                                        "type": "string",
                                        "description": "workdir specifies the working directory path from where to execute the command. It defaults to the current context path (scm or current shell). Updatecli join the current path and the one specified in parameter if the parameter one contains a relative path."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "command"
                                ],
                                "description": "Spec defines a specification for a \"shell\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/lock"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the terraform lock file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of terraform lock files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update, supports with or without registry url.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "platforms": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"platforms\" is the target platforms to request package checksums for.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "skipconstraints": {
                                        "type": "boolean",
                                        "description": "\"skipconstraints\" will control whether the constraint in lock file is updated\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tNOTE: That turning this off can break the lockfile if version value source does not follow the constraints"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/lock\" defines the specification for manipulating .terraform-lock.hcl files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "yaml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the yaml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of yaml files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the yaml keypath.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys.\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: $.agent.name\n\t\t\t* key: $.agents[0].name\n\t\t\t* key: $.agents[*].name\n\t\t\t* key: $.'agents.name'\n\n\t\tremark:\n\t\t\tfield path with key/value is not supported at the moment.\n\t\t\tsome help would be useful on https://github.com/goccy/go-yaml/issues/290"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a yaml key.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "keyonly": {
                                        "type": "boolean",
                                        "description": "\"keyonly\" allows to only check if a key exist and do not return an error otherwise\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"yaml\" defines the specification for manipulating \"yaml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerfile"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File specifies the dockerimage file such as Dockerfile"
                                    },
                                    "instruction": {
                                        "description": "Instruction specifies a DockerImage instruction such as ENV"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Value specifies the value for a specified Dockerfile instruction."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerfile\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerimage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architectures": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[C] architectures specifies a list of architectures to check container images for (conditions only)"
                                    },
                                    "architecture": {
                                        "type": "string",
                                        "description": "[S][C] architecture specifies the container image architecture such as `amd64`"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "[S][C] image specifies the container image such as `updatecli/updatecli`"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C] tag specifies the container image tag such as `latest`"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tagfilter": {
                                        "type": "string",
                                        "description": "[S] tagfilter allows to restrict tags retrieved from a remote registry by using a regular expression."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File contains the file path(s) to take in account and is incompatible with Files"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Files contains the file path(s) to take in account and is incompatible with File"
                                    },
                                    "line": {
                                        "type": "integer",
                                        "description": "Line contains the line of the file(s) to take in account"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "Content specifies the content to take in account instead of the file content"
                                    },
                                    "forcecreate": {
                                        "type": "boolean",
                                        "description": "ForceCreate specifies if nonexistent file(s) should be created if they are targets"
                                    },
                                    "matchpattern": {
                                        "type": "string",
                                        "description": "MatchPattern specifies the regexp pattern to match on the file(s)"
                                    },
                                    "replacepattern": {
                                        "type": "string",
                                        "description": "ReplacePattern specifies the regexp replace pattern to apply on the file(s) content"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"file\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    }
                ]
            },
            "type": "object",
            "description": "\"sources\" defines the list of Updatecli source definition.\n\n\t\texample:\n\t\t---\n\t\tsources:\n\t\t\t# Source to retrieve the latest version of nodejs\n\t\t\tnodejs:\n\t\t\t\tname: Get latest nodejs version\n\t\t\t\tkind: json\n\t\t\t\tspec:\n\t\t\t\t\tfile: https://nodejs.org/dist/index.json\n\t\t\t\t\tkey: .(lts!=false).version\n\t\t---"
        },
        "conditions": {
            "additionalProperties": {
                "oneOf": [
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T]Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] Title defines the GitLab release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] Tag defines the GitLab release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] Commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] Description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] Draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] Prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/module"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "proxy": {
                                        "type": "string",
                                        "description": "Proxy may have the schemes https, http. file is not supported at this time. If a URL has no scheme, https is assumed\n[S][C] Proxy allows to override GO proxy similarly to GOPROXY environment variable."
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "[S][C] Module specifies the name of the module"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "module"
                                ],
                                "description": "Spec defines a specification for a \"gomodule\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "toml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the toml file to manipulate"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the query to retrieve an information from a toml file"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Value specifies the value for a specific key. Default to source output"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "createmissingkey": {
                                        "type": "boolean",
                                        "description": "[t] CreateMissingKey allows non-existing keys. If the key does not exist, the key is created if AllowsMissingKey\n\t  is true, otherwise an error is raised (the default).\n\t  Only supported if Key is used"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "csv"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the csv file"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv query"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv value, default to source output"
                                    },
                                    "comma": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv separator character, default \",\""
                                    },
                                    "comment": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv comment character, default \"#\""
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s]VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerimage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architectures": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[C] architectures specifies a list of architectures to check container images for (conditions only)"
                                    },
                                    "architecture": {
                                        "type": "string",
                                        "description": "[S][C] architecture specifies the container image architecture such as `amd64`"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "[S][C] image specifies the container image such as `updatecli/updatecli`"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C] tag specifies the container image tag such as `latest`"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tagfilter": {
                                        "type": "string",
                                        "description": "[S] tagfilter allows to restrict tags retrieved from a remote registry by using a regular expression."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File contains the file path(s) to take in account and is incompatible with Files"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Files contains the file path(s) to take in account and is incompatible with File"
                                    },
                                    "line": {
                                        "type": "integer",
                                        "description": "Line contains the line of the file(s) to take in account"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "Content specifies the content to take in account instead of the file content"
                                    },
                                    "forcecreate": {
                                        "type": "boolean",
                                        "description": "ForceCreate specifies if nonexistent file(s) should be created if they are targets"
                                    },
                                    "matchpattern": {
                                        "type": "string",
                                        "description": "MatchPattern specifies the regexp pattern to match on the file(s)"
                                    },
                                    "replacepattern": {
                                        "type": "string",
                                        "description": "ReplacePattern specifies the regexp replace pattern to apply on the file(s) content"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"file\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "cargopackage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "registry": {
                                        "properties": {
                                            "auth": {
                                                "properties": {
                                                    "token": {
                                                        "type": "string",
                                                        "description": "[A][S][C] Token specifies the cargo registry token to use for authentication."
                                                    },
                                                    "headerformat": {
                                                        "type": "string",
                                                        "description": "[A][S][C] HeaderFormat specifies the cargo registry header format to use for authentication (defaults to `Bearer`)."
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "description": "[A][S][C] Auth specifies the cargo registry auth to use for authentication."
                                            },
                                            "url": {
                                                "type": "string",
                                                "description": "[A][S][C] URL specifies the cargo registry URL to use for authentication."
                                            },
                                            "rootdir": {
                                                "type": "string",
                                                "description": "[A][S][C] RootDir specifies the cargo registry root directory to use as FS index."
                                            },
                                            "scmid": {
                                                "type": "string",
                                                "description": "[A] SCMID specifies the cargo registry scmId to use as FS index."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] Registry specifies the registry to use"
                                    },
                                    "package": {
                                        "type": "string",
                                        "description": "[S][C] Package specifies the name of the package"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "package"
                                ],
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "helmchart"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "file defines the Helm Chart file to update.\n\t\tthe path must be relative to chart root directory\n\t\tthe chart name is defined by the parameter \"name\"\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"values.yaml\""
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "key defines the yamlpath query used for retrieving value from a YAML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* key: $.image.tag\n\t\t\t* key: $.images[0].tag\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "name defines the Chart name path like 'stable/chart'.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* name: stable/chart\n\n\t\tremark:\n\t\t\t* when used with a scm, the name must be the relative path from the scm repository root directory\n\t\t\t  with such as \"stable/chart\""
                                    },
                                    "skippackaging": {
                                        "type": "boolean",
                                        "description": "skippackaging defines if a Chart should be packaged or not.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault: false"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "url defines the Chart location URL.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\texample:\n\t\t\t* index.yaml\n\t\t\t* file://./index.yaml\n\t\t\t* https://github.com/updatecli/charts.git\n\t\t\t* oci://ghcr.io/olblak/charts/"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "value is the value associated with a yamlpath query.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "version defines the Chart version. It is used by condition to check if a version exists on the registry.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionincrement": {
                                        "type": "string",
                                        "description": "versionIncrement defines if a Chart changes, triggers, or not, a Chart version update, accepted values is a comma separated list of \"none,major,minor,patch,auto\".\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"minor\"\n\n\t\tremark:\n\t\t\twhen multiple pipelines update the same chart, the versionIncrement will be applied multiple times.\n\t\t\tmore information on https://github.com/updatecli/updatecli/issues/693"
                                    },
                                    "appversion": {
                                        "type": "boolean",
                                        "description": "AppVersion defines if a Chart changes, triggers, or not, a Chart AppVersion update.\n\t\tThe value is retrieved from the source input.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault\n\t\t\tfalse"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "versionfilter provides parameters to specify version pattern and its type like 'regex', 'semver', or just 'latest'.\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tsemver\n\n\t\tremark:\n\t\t\t* Helm chart uses semver by default."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an \"helmchart\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "aws/ami"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "accesskey": {
                                        "type": "string",
                                        "description": "accesskey specifies the aws access key which combined with `secretkey`, is one of the way to authenticate"
                                    },
                                    "secretkey": {
                                        "type": "string",
                                        "description": "secretkey specifies the aws secret key which combined with `accesskey`, is one of the way to authenticate"
                                    },
                                    "filters": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name specifies a filter name."
                                                },
                                                "values": {
                                                    "type": "string",
                                                    "description": "Values specifies a filter value for a specific filter name."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "description": "Filter represents the updatecli configuration describing AMI filters."
                                        },
                                        "type": "array",
                                        "description": "Filters specifies a list of AMI filters"
                                    },
                                    "region": {
                                        "type": "string",
                                        "description": "Region specifies the AWS region to use when looking for AMI"
                                    },
                                    "endpoint": {
                                        "type": "string",
                                        "description": "Endpoint specifies the AWS endpoint to use when looking for AMI"
                                    },
                                    "dryrun": {
                                        "type": "boolean",
                                        "description": "Dryrun allows to Check whether you have the required permissions for the action."
                                    },
                                    "sortby": {
                                        "type": "string",
                                        "description": "Sortby specifies the order of AMI-ID that will be used to retrieve the last element such as `creationdateasc`"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec contains the updatecli configuration provided by users."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "npm"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Defines the specific npm package name"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Defines a specific package version"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "URL defines the registry url (defaults to `https://registry.npmjs.org/`)"
                                    },
                                    "registrytoken": {
                                        "type": "string",
                                        "description": "RegistryToken defines the token to use when connection to the registry"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "npmrcpath": {
                                        "type": "string",
                                        "description": "NpmrcPath defines the path to the .npmrc file"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an Npm package parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Bitbucket tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/registry"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "\"type\" defines the type registry request to look up.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tSupported values: module, provider"
                                    },
                                    "hostname": {
                                        "type": "string",
                                        "description": "\"hostname\" the hostname of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Optional\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "\"namespace\" the namespace of the provider or module\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "\"name\" the name of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "targetsystem": {
                                        "type": "string",
                                        "description": "\"targetsystem\" the target system for the module in registry\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required for type module unless using rawstring\n\t\t\t* Not allowed with rawstring\n\t\t\t* Applicable for module."
                                    },
                                    "rawstring": {
                                        "type": "string",
                                        "description": "\"rawstring\" provider reference to registry in single string.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tExamples:\n\t\t\t* hashicorp/kubernetes\n\t\t\t* registry.terraform.io/hashicorp/kubernetes\n\t\t\t* terraform-aws-modules/vpc/aws\n\t\t\t* app.terraform.io/terraform-aws-modules/vpc/aws\n\n\t\tremark:\n\t\t\t* Applicable for module and provider.\n\t\t\t* Not allowed with hostname, namespace, name, and targetsystem."
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "\"version\" defines a specific version to be used during condition check.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitbranch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "[s][c][t] Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[c][t] Specify branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gitbranch\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "shell"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "command": {
                                        "type": "string",
                                        "description": "command specifies the shell command to execute by Updatecli"
                                    },
                                    "environments": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name defines the environment variable name"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "Value defines the environment variable value"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "name"
                                            ],
                                            "description": "Environment is a struct containing information for an environment variable such as its name and its value"
                                        },
                                        "type": "array",
                                        "description": "environments allows to pass environment variable(s) to the shell script. By default no environment variable are shared."
                                    },
                                    "changedif": {
                                        "oneOf": [
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "console/output"
                                                        ]
                                                    },
                                                    "spec": true
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "exitcode"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "warning": {
                                                                "type": "integer",
                                                                "description": "Warning defines the command exit code used by Updatecli to identify a change need. Default to 2 if no exitcode have been specified"
                                                            },
                                                            "success": {
                                                                "type": "integer",
                                                                "description": "Success defines the command exit code used by Updatecli to identify no changes are needed. Default to 0 if no exitcode have been specified"
                                                            },
                                                            "failure": {
                                                                "type": "integer",
                                                                "description": "Failure defines the command exit code used by Updatecli to identify that something went wrong. Default to 1 if no exitcode have been specified"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "warning",
                                                            "success",
                                                            "failure"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "file/checksum"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "files": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "description": "Files specifies the list of file that Updatecli monitors to identify state change"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "files"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            }
                                        ],
                                        "description": "ChangedIf defines how to interpreted shell command success criteria. What a success means, what an error means, and what a warning would mean"
                                    },
                                    "shell": {
                                        "type": "string",
                                        "description": "Shell specifies which shell interpreter to use. Default to powershell(Windows) and \"/bin/sh\" (Darwin/Linux)"
                                    },
                                    "workdir": {
                                        "type": "string",
                                        "description": "workdir specifies the working directory path from where to execute the command. It defaults to the current context path (scm or current shell). Updatecli join the current path and the one specified in parameter if the parameter one contains a relative path."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "command"
                                ],
                                "description": "Spec defines a specification for a \"shell\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "maven"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "Deprecated, please specify the Maven url in the repository"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "Specifies the maven repository url + name"
                                    },
                                    "repositories": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Repositories specifies a list of Maven repository where to look for version. Order matter, version is retrieve from the first repository with the last one being Maven Central."
                                    },
                                    "groupid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact groupID"
                                    },
                                    "artifactid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact artifactID"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"maven\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Gitea tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Version defines a specific golang version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "json"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the Json file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of Json files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the Jsonpath key to manipulate.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of Jsonpath accepts keys.\n\t\t\t* key accepts Dasel query, more information on https://github.com/tomwright/dasel\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: name\n\t\t\t* file: https://nodejs.org/dist/index.json\n\t\t\t  key: .(lts!=false).version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" defines the Jsonpath key value to manipulate. Default to source output.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used for a condition or a target, the default value is the output of the source."
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key\n\n\t\t\"query\" defines the Jsonpath query to manipulate. It accepts advanced Dasel query\n\t\tthe goal is to retrieve a list of values and then filter them with versionfilter.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* query: .name\n\t\t\t* query: \".[*].tag_name\"\n\n\t\tremark:\n\t\t\t* query accepts Dasel query, more information on https://github.com/tomwright/dasel"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"json\" defines the specification for manipulating \"json\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/provider"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/provider\" defines the specification for manipulating providers in terraform files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "yaml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the yaml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of yaml files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the yaml keypath.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys.\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: $.agent.name\n\t\t\t* key: $.agents[0].name\n\t\t\t* key: $.agents[*].name\n\t\t\t* key: $.'agents.name'\n\n\t\tremark:\n\t\t\tfield path with key/value is not supported at the moment.\n\t\t\tsome help would be useful on https://github.com/goccy/go-yaml/issues/290"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a yaml key.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "keyonly": {
                                        "type": "boolean",
                                        "description": "\"keyonly\" allows to only check if a key exist and do not return an error otherwise\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"yaml\" defines the specification for manipulating \"yaml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the GitLab tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "githubrelease"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "owner": {
                                        "type": "string",
                                        "description": "[s][c] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[s][c] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[s][c] Token specifies the credential used to authenticate with"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "[s][c] URL specifies the default github url in case of GitHub enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[s][c] Username specifies the username used to authenticate with GitHub API"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "typefilter": {
                                        "properties": {
                                            "draft": {
                                                "type": "boolean",
                                                "description": "\"Draft\" enable/disable GitHub draft release"
                                            },
                                            "prerelease": {
                                                "type": "boolean",
                                                "description": "\"PreRelease\" enable/disable GitHub PreRelease"
                                            },
                                            "release": {
                                                "type": "boolean",
                                                "description": "\"Release\" enable/disable GitHub release"
                                            },
                                            "latest": {
                                                "type": "boolean",
                                                "description": "\"Latest\" if set to true will only filter the release flag as latest."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s][c] TypeFilter specifies the GitHub Release type to retrieve before applying the versionfilter rule"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[c] Tag allows to check for a specific release tag, default to source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository",
                                    "token"
                                ],
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "hcl"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/lock"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the terraform lock file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of terraform lock files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update, supports with or without registry url.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "platforms": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"platforms\" is the target platforms to request package checksums for.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "skipconstraints": {
                                        "type": "boolean",
                                        "description": "\"skipconstraints\" will control whether the constraint in lock file is updated\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tNOTE: That turning this off can break the lockfile if version value source does not follow the constraints"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/lock\" defines the specification for manipulating .terraform-lock.hcl files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "xml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" define the xml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the xpath query used for retrieving value from a XML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: \"/project/parent/version\"\n\t\t\t* path: \"//breakfast_menu/food[0]/name\"\n\t\t\t* path: \"//book[@category='WEB']/title\""
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a xpath query.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used from a condition or a target, the default value is set to linked source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"xml\" defines the specification for manipulating \"xml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerfile"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File specifies the dockerimage file such as Dockerfile"
                                    },
                                    "instruction": {
                                        "description": "Instruction specifies a DockerImage instruction such as ENV"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Value specifies the value for a specified Dockerfile instruction."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerfile\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gittag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "Message associated to the git tag"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "Key of the tag object to retrieve, default is tag \"name\" filters are always against tag name, this only controls the output; Current options are 'name' and 'hash'."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "jenkins"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "release": {
                                        "type": "string",
                                        "description": "[s][c] Defines the release name. It accepts \"stable\" or \"weekly\""
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[s][c] Defines a specific release version (condition only)"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"jenkins\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerdigest"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architecture": {
                                        "type": "string",
                                        "description": "architecture specifies the container image architecture such as `amd64`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tamd64"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "image specifies the container image such as `updatecli/updatecli`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "tag specifies the container image tag such as `latest`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "digest": {
                                        "type": "string",
                                        "description": "digest specifies the container image digest such as `sha256:ce782db15ab5491c6c6178da8431b3db66988ccd11512034946a9667846952a6`\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tWhen used from a condition, the default value is set to the linked source output."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "hidetag": {
                                        "type": "boolean",
                                        "description": "hideTag specifies if the tag should be hidden from the digest\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerdigest\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] owner specifies the repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T] repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] title defines the Gitea release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] tag defines the Gitea release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/gomod"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File defines the go.mod file, default to \"go.mod\""
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "Module defines the module path"
                                    },
                                    "indirect": {
                                        "type": "boolean",
                                        "description": "Indirect specifies if we manipulate an indirect dependency"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Version Defines a specific golang version"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "sourceid": {
                                "type": "string"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "failwhen": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    }
                ]
            },
            "type": "object",
            "description": "\"conditions\" defines the list of Updatecli condition definition.\n\n\t\texample:\n\t\t---\n\t\tconditions:\n\t\t\tcontainer:\n\t\t\t\tname: Check if Updatecli container image for tag \"v0.63.0\" exists\n\t\t\t\tkind: dockerimage\n\t\t\t\tspec:\n\t\t\t\t\timage: \"updatecli/updatecli:latest\"\n\t\t\t\t\ttag: \"v0.63.0\"\n\t\t---"
        },
        "targets": {
            "additionalProperties": {
                "oneOf": [
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T]Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] Title defines the GitLab release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] Tag defines the GitLab release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] Commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] Description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] Draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] Prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/gomod"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File defines the go.mod file, default to \"go.mod\""
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "Module defines the module path"
                                    },
                                    "indirect": {
                                        "type": "boolean",
                                        "description": "Indirect specifies if we manipulate an indirect dependency"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Version Defines a specific golang version"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "hcl"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Bitbucket tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "yaml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the yaml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of yaml files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the yaml keypath.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys.\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: $.agent.name\n\t\t\t* key: $.agents[0].name\n\t\t\t* key: $.agents[*].name\n\t\t\t* key: $.'agents.name'\n\n\t\tremark:\n\t\t\tfield path with key/value is not supported at the moment.\n\t\t\tsome help would be useful on https://github.com/goccy/go-yaml/issues/290"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a yaml key.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "keyonly": {
                                        "type": "boolean",
                                        "description": "\"keyonly\" allows to only check if a key exist and do not return an error otherwise\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"yaml\" defines the specification for manipulating \"yaml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "csv"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the csv file"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv query"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the csv value, default to source output"
                                    },
                                    "comma": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv separator character, default \",\""
                                    },
                                    "comment": {
                                        "type": "integer",
                                        "description": "[s][c][t] Comma specifies the csv comment character, default \"#\""
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s]VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerfile"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File specifies the dockerimage file such as Dockerfile"
                                    },
                                    "instruction": {
                                        "description": "Instruction specifies a DockerImage instruction such as ENV"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Value specifies the value for a specified Dockerfile instruction."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerfile\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gittag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "message": {
                                        "type": "string",
                                        "description": "Message associated to the git tag"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "Key of the tag object to retrieve, default is tag \"name\" filters are always against tag name, this only controls the output; Current options are 'name' and 'hash'."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "xml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" define the xml file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the xpath query used for retrieving value from a XML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: \"/project/parent/version\"\n\t\t\t* path: \"//breakfast_menu/food[0]/name\"\n\t\t\t* path: \"//book[@category='WEB']/title\""
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a xpath query.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used from a condition or a target, the default value is set to linked source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"xml\" defines the specification for manipulating \"xml\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerdigest"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architecture": {
                                        "type": "string",
                                        "description": "architecture specifies the container image architecture such as `amd64`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tamd64"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "image specifies the container image such as `updatecli/updatecli`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "tag specifies the container image tag such as `latest`\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition"
                                    },
                                    "digest": {
                                        "type": "string",
                                        "description": "digest specifies the container image digest such as `sha256:ce782db15ab5491c6c6178da8431b3db66988ccd11512034946a9667846952a6`\n\n\t\tcompatible:\n\t\t\t* condition\n\n\t\tdefault:\n\t\t\tWhen used from a condition, the default value is set to the linked source output."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "hidetag": {
                                        "type": "boolean",
                                        "description": "hideTag specifies if the tag should be hidden from the digest\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tfalse"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerdigest\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "json"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the Json file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of Json files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* scheme \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "\"key\" defines the Jsonpath key to manipulate.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* key is a simpler version of Jsonpath accepts keys.\n\t\t\t* key accepts Dasel query, more information on https://github.com/tomwright/dasel\n\n\t\texample:\n\t\t\t* key: $.name\n\t\t\t* key: name\n\t\t\t* file: https://nodejs.org/dist/index.json\n\t\t\t  key: .(lts!=false).version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" defines the Jsonpath key value to manipulate. Default to source output.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\twhen used for a condition or a target, the default value is the output of the source."
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key\n\n\t\t\"query\" defines the Jsonpath query to manipulate. It accepts advanced Dasel query\n\t\tthe goal is to retrieve a list of values and then filter them with versionfilter.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* query: .name\n\t\t\t* query: \".[*].tag_name\"\n\n\t\tremark:\n\t\t\t* query accepts Dasel query, more information on https://github.com/tomwright/dasel"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"json\" defines the specification for manipulating \"json\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "toml"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "[s][c][t] File specifies the toml file to manipulate"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[c][t] Files specifies a list of Json file to manipulate"
                                    },
                                    "query": {
                                        "type": "string",
                                        "description": "[s][c][t] Query allows to used advanced query. Override the parameter key"
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "[s][c][t] Key specifies the query to retrieve an information from a toml file"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "[s][c][t] Value specifies the value for a specific key. Default to source output"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "createmissingkey": {
                                        "type": "boolean",
                                        "description": "[t] CreateMissingKey allows non-existing keys. If the key does not exist, the key is created if AllowsMissingKey\n\t  is true, otherwise an error is raised (the default).\n\t  Only supported if Key is used"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/lock"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the terraform lock file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of terraform lock files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update, supports with or without registry url.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "platforms": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"platforms\" is the target platforms to request package checksums for.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "skipconstraints": {
                                        "type": "boolean",
                                        "description": "\"skipconstraints\" will control whether the constraint in lock file is updated\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tNOTE: That turning this off can break the lockfile if version value source does not follow the constraints"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/lock\" defines the specification for manipulating .terraform-lock.hcl files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "jenkins"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "release": {
                                        "type": "string",
                                        "description": "[s][c] Defines the release name. It accepts \"stable\" or \"weekly\""
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[s][c] Defines a specific release version (condition only)"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"jenkins\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "npm"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Defines the specific npm package name"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Defines a specific package version"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "URL defines the registry url (defaults to `https://registry.npmjs.org/`)"
                                    },
                                    "registrytoken": {
                                        "type": "string",
                                        "description": "RegistryToken defines the token to use when connection to the registry"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "npmrcpath": {
                                        "type": "string",
                                        "description": "NpmrcPath defines the path to the .npmrc file"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an Npm package parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "shell"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "command": {
                                        "type": "string",
                                        "description": "command specifies the shell command to execute by Updatecli"
                                    },
                                    "environments": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name defines the environment variable name"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "Value defines the environment variable value"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "name"
                                            ],
                                            "description": "Environment is a struct containing information for an environment variable such as its name and its value"
                                        },
                                        "type": "array",
                                        "description": "environments allows to pass environment variable(s) to the shell script. By default no environment variable are shared."
                                    },
                                    "changedif": {
                                        "oneOf": [
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "exitcode"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "warning": {
                                                                "type": "integer",
                                                                "description": "Warning defines the command exit code used by Updatecli to identify a change need. Default to 2 if no exitcode have been specified"
                                                            },
                                                            "success": {
                                                                "type": "integer",
                                                                "description": "Success defines the command exit code used by Updatecli to identify no changes are needed. Default to 0 if no exitcode have been specified"
                                                            },
                                                            "failure": {
                                                                "type": "integer",
                                                                "description": "Failure defines the command exit code used by Updatecli to identify that something went wrong. Default to 1 if no exitcode have been specified"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "warning",
                                                            "success",
                                                            "failure"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "file/checksum"
                                                        ]
                                                    },
                                                    "spec": {
                                                        "$schema": "http://json-schema.org/draft-04/schema",
                                                        "properties": {
                                                            "files": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array",
                                                                "description": "Files specifies the list of file that Updatecli monitors to identify state change"
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                            "files"
                                                        ]
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            },
                                            {
                                                "$schema": "http://json-schema.org/draft-04/schema",
                                                "properties": {
                                                    "kind": {
                                                        "enum": [
                                                            "console/output"
                                                        ]
                                                    },
                                                    "spec": true
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                            }
                                        ],
                                        "description": "ChangedIf defines how to interpreted shell command success criteria. What a success means, what an error means, and what a warning would mean"
                                    },
                                    "shell": {
                                        "type": "string",
                                        "description": "Shell specifies which shell interpreter to use. Default to powershell(Windows) and \"/bin/sh\" (Darwin/Linux)"
                                    },
                                    "workdir": {
                                        "type": "string",
                                        "description": "workdir specifies the working directory path from where to execute the command. It defaults to the current context path (scm or current shell). Updatecli join the current path and the one specified in parameter if the parameter one contains a relative path."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "command"
                                ],
                                "description": "Spec defines a specification for a \"shell\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "helmchart"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "file defines the Helm Chart file to update.\n\t\tthe path must be relative to chart root directory\n\t\tthe chart name is defined by the parameter \"name\"\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"values.yaml\""
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "key defines the yamlpath query used for retrieving value from a YAML document\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* key: $.image.tag\n\t\t\t* key: $.images[0].tag\n\n\t\tremark:\n\t\t\t* key is a simpler version of yamlpath accepts keys."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "name defines the Chart name path like 'stable/chart'.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* name: stable/chart\n\n\t\tremark:\n\t\t\t* when used with a scm, the name must be the relative path from the scm repository root directory\n\t\t\t  with such as \"stable/chart\""
                                    },
                                    "skippackaging": {
                                        "type": "boolean",
                                        "description": "skippackaging defines if a Chart should be packaged or not.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault: false"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "url defines the Chart location URL.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\texample:\n\t\t\t* index.yaml\n\t\t\t* file://./index.yaml\n\t\t\t* https://github.com/updatecli/charts.git\n\t\t\t* oci://ghcr.io/olblak/charts/"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "value is the value associated with a yamlpath query.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "version defines the Chart version. It is used by condition to check if a version exists on the registry.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionincrement": {
                                        "type": "string",
                                        "description": "versionIncrement defines if a Chart changes, triggers, or not, a Chart version update, accepted values is a comma separated list of \"none,major,minor,patch,auto\".\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tdefault set to \"minor\"\n\n\t\tremark:\n\t\t\twhen multiple pipelines update the same chart, the versionIncrement will be applied multiple times.\n\t\t\tmore information on https://github.com/updatecli/updatecli/issues/693"
                                    },
                                    "appversion": {
                                        "type": "boolean",
                                        "description": "AppVersion defines if a Chart changes, triggers, or not, a Chart AppVersion update.\n\t\tThe value is retrieved from the source input.\n\n\t\tcompatible:\n\t\t\t* target\n\n\t\tdefault\n\t\t\tfalse"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "versionfilter provides parameters to specify version pattern and its type like 'regex', 'semver', or just 'latest'.\n\n\t\tcompatible:\n\t\t\t* source\n\n\t\tdefault:\n\t\t\tsemver\n\n\t\tremark:\n\t\t\t* Helm chart uses semver by default."
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for an \"helmchart\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "dockerimage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "architectures": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "[C] architectures specifies a list of architectures to check container images for (conditions only)"
                                    },
                                    "architecture": {
                                        "type": "string",
                                        "description": "[S][C] architecture specifies the container image architecture such as `amd64`"
                                    },
                                    "image": {
                                        "type": "string",
                                        "description": "[S][C] image specifies the container image such as `updatecli/updatecli`"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C] tag specifies the container image tag such as `latest`"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "username specifies the container registry username to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "password specifies the container registry password to use for authentication. Not compatible with token\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with token"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "token specifies the container registry token to use for authentication.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tby default credentials are fetch from the local environment such as `~/.docker/config.json`.\n\n\t\tremark:\n\t\t\tNot compatible with username/password"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tagfilter": {
                                        "type": "string",
                                        "description": "[S] tagfilter allows to restrict tags retrieved from a remote registry by using a regular expression."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitlab/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the GitLab url to interact with\n\n\t\tdefault:\n\t\t\turl defaults to \"gitlab.com\""
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with GitLab"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" defines the credential used to authenticate with GitLab"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the GitLab tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with GitLab release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "githubrelease"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "owner": {
                                        "type": "string",
                                        "description": "[s][c] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[s][c] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[s][c] Token specifies the credential used to authenticate with"
                                    },
                                    "url": {
                                        "type": "string",
                                        "description": "[s][c] URL specifies the default github url in case of GitHub enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[s][c] Username specifies the username used to authenticate with GitHub API"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "typefilter": {
                                        "properties": {
                                            "draft": {
                                                "type": "boolean",
                                                "description": "\"Draft\" enable/disable GitHub draft release"
                                            },
                                            "prerelease": {
                                                "type": "boolean",
                                                "description": "\"PreRelease\" enable/disable GitHub PreRelease"
                                            },
                                            "release": {
                                                "type": "boolean",
                                                "description": "\"Release\" enable/disable GitHub release"
                                            },
                                            "latest": {
                                                "type": "boolean",
                                                "description": "\"Latest\" if set to true will only filter the release flag as latest."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s][c] TypeFilter specifies the GitHub Release type to retrieve before applying the versionfilter rule"
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[c] Tag allows to check for a specific release tag, default to source output"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "owner",
                                    "repository",
                                    "token"
                                ],
                                "description": "Spec defines a specification for a \"gittag\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the hcl file path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for source and condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of hcl files path to interact with.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a source only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for source and condition"
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": "\"path\" defines the hcl attribute path.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\t\t\t* target\n\n\t\texample:\n\t\t\t* path: resource.aws_instance.app_server.ami\n\t\t\t* path: resource.helm_release.prometheus.version\n\t\t\t* path: plugin.aws.version"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a hcl path.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"hcl\" defines the specification for manipulating \"hcl\" files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "aws/ami"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "accesskey": {
                                        "type": "string",
                                        "description": "accesskey specifies the aws access key which combined with `secretkey`, is one of the way to authenticate"
                                    },
                                    "secretkey": {
                                        "type": "string",
                                        "description": "secretkey specifies the aws secret key which combined with `accesskey`, is one of the way to authenticate"
                                    },
                                    "filters": {
                                        "items": {
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name specifies a filter name."
                                                },
                                                "values": {
                                                    "type": "string",
                                                    "description": "Values specifies a filter value for a specific filter name."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "description": "Filter represents the updatecli configuration describing AMI filters."
                                        },
                                        "type": "array",
                                        "description": "Filters specifies a list of AMI filters"
                                    },
                                    "region": {
                                        "type": "string",
                                        "description": "Region specifies the AWS region to use when looking for AMI"
                                    },
                                    "endpoint": {
                                        "type": "string",
                                        "description": "Endpoint specifies the AWS endpoint to use when looking for AMI"
                                    },
                                    "dryrun": {
                                        "type": "boolean",
                                        "description": "Dryrun allows to Check whether you have the required permissions for the action."
                                    },
                                    "sortby": {
                                        "type": "string",
                                        "description": "Sortby specifies the order of AMI-ID that will be used to retrieve the last element such as `creationdateasc`"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec contains the updatecli configuration provided by users."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "cargopackage"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "registry": {
                                        "properties": {
                                            "auth": {
                                                "properties": {
                                                    "token": {
                                                        "type": "string",
                                                        "description": "[A][S][C] Token specifies the cargo registry token to use for authentication."
                                                    },
                                                    "headerformat": {
                                                        "type": "string",
                                                        "description": "[A][S][C] HeaderFormat specifies the cargo registry header format to use for authentication (defaults to `Bearer`)."
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "description": "[A][S][C] Auth specifies the cargo registry auth to use for authentication."
                                            },
                                            "url": {
                                                "type": "string",
                                                "description": "[A][S][C] URL specifies the cargo registry URL to use for authentication."
                                            },
                                            "rootdir": {
                                                "type": "string",
                                                "description": "[A][S][C] RootDir specifies the cargo registry root directory to use as FS index."
                                            },
                                            "scmid": {
                                                "type": "string",
                                                "description": "[A] SCMID specifies the cargo registry scmId to use as FS index."
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] Registry specifies the registry to use"
                                    },
                                    "package": {
                                        "type": "string",
                                        "description": "[S][C] Package specifies the name of the package"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "package"
                                ],
                                "description": "Spec defines a specification for a \"dockerimage\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Version defines a specific golang version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"Golang\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/provider"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "\"file\" defines the file path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* \"file\" and \"files\" are mutually exclusive\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in path for condition"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "\"files\" defines the list of files path to interact with.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tremark:\n\t\t\t* file and files are mutually exclusive\n\t\t\t* when using as a condition only one file is supported\n\t\t\t* protocols \"https://\", \"http://\", and \"file://\" are supported in file path for condition"
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "\"value\" is the value associated with a terraform provider.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target\n\n\t\tdefault:\n\t\t\tWhen used from a condition or a target, the default value is set to linked source output."
                                    },
                                    "provider": {
                                        "type": "string",
                                        "description": "\"provider\" is the terraform provider you wish to update.\n\n\t\tcompatible:\n\t\t\t* condition\n\t\t\t* target"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "\"terraform/provider\" defines the specification for manipulating providers in terraform files."
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "terraform/registry"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "\"type\" defines the type registry request to look up.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tSupported values: module, provider"
                                    },
                                    "hostname": {
                                        "type": "string",
                                        "description": "\"hostname\" the hostname of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Optional\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "namespace": {
                                        "type": "string",
                                        "description": "\"namespace\" the namespace of the provider or module\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "\"name\" the name of the provider or module.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required unless using rawstring\n\t\t\t* Not allowed with rawstring.\n\t\t\t* Applicable for module and provider."
                                    },
                                    "targetsystem": {
                                        "type": "string",
                                        "description": "\"targetsystem\" the target system for the module in registry\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tremark:\n\t\t\t* Required for type module unless using rawstring\n\t\t\t* Not allowed with rawstring\n\t\t\t* Applicable for module."
                                    },
                                    "rawstring": {
                                        "type": "string",
                                        "description": "\"rawstring\" provider reference to registry in single string.\n\n\t\tcompatible:\n\t\t\t* source\n\t\t\t* condition\n\n\t\tExamples:\n\t\t\t* hashicorp/kubernetes\n\t\t\t* registry.terraform.io/hashicorp/kubernetes\n\t\t\t* terraform-aws-modules/vpc/aws\n\t\t\t* app.terraform.io/terraform-aws-modules/vpc/aws\n\n\t\tremark:\n\t\t\t* Applicable for module and provider.\n\t\t\t* Not allowed with hostname, namespace, name, and targetsystem."
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "\"version\" defines a specific version to be used during condition check.\n\n\t\tcompatible:\n\t\t\t* condition"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "\"versionfilter\" provides parameters to specify version pattern and its type like regex, semver, or just latest.\n\n\t\tcompatible:\n\t\t\t* source"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/tag"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S][C] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[S] Tag defines the Gitea tag ."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "maven"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "Deprecated, please specify the Maven url in the repository"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "Specifies the maven repository url + name"
                                    },
                                    "repositories": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Repositories specifies a list of Maven repository where to look for version. Order matter, version is retrieve from the first repository with the last one being Maven Central."
                                    },
                                    "groupid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact groupID"
                                    },
                                    "artifactid": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact artifactID"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "Specifies the maven artifact version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"maven\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "stash/branch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "[S][C][T] URL specifies the default github url in case of Bitbucket enterprise"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "[S][C][T] Username specifies the username used to authenticate with Bitbucket API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "[S][C][T] Token specifies the credential used to authenticate with"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C] Owner specifies repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C] Repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[C] Branch specifies the branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Bitbucket release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "golang/module"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "proxy": {
                                        "type": "string",
                                        "description": "Proxy may have the schemes https, http. file is not supported at this time. If a URL has no scheme, https is assumed\n[S][C] Proxy allows to override GO proxy similarly to GOPROXY environment variable."
                                    },
                                    "module": {
                                        "type": "string",
                                        "description": "[S][C] Module specifies the name of the module"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "[C] Defines a specific package version"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "module"
                                ],
                                "description": "Spec defines a specification for a \"gomodule\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "file"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "File contains the file path(s) to take in account and is incompatible with Files"
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array",
                                        "description": "Files contains the file path(s) to take in account and is incompatible with File"
                                    },
                                    "line": {
                                        "type": "integer",
                                        "description": "Line contains the line of the file(s) to take in account"
                                    },
                                    "content": {
                                        "type": "string",
                                        "description": "Content specifies the content to take in account instead of the file content"
                                    },
                                    "forcecreate": {
                                        "type": "boolean",
                                        "description": "ForceCreate specifies if nonexistent file(s) should be created if they are targets"
                                    },
                                    "matchpattern": {
                                        "type": "string",
                                        "description": "MatchPattern specifies the regexp pattern to match on the file(s)"
                                    },
                                    "replacepattern": {
                                        "type": "string",
                                        "description": "ReplacePattern specifies the regexp replace pattern to apply on the file(s) content"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"file\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitbranch"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": "[s][c][t] Path contains the git repository path"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[s] VersionFilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": "[c][t] Specify branch name"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Spec defines a specification for a \"gitbranch\" resource parsed from an updatecli manifest file"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    },
                    {
                        "$schema": "http://json-schema.org/draft-04/schema",
                        "properties": {
                            "dependson": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "dependson specifies which resources must be executed before the current one"
                            },
                            "name": {
                                "type": "string",
                                "description": "name specifies the resource name"
                            },
                            "kind": {
                                "enum": [
                                    "gitea/release"
                                ]
                            },
                            "transformers": {
                                "items": {
                                    "properties": {
                                        "addprefix": {
                                            "type": "string",
                                            "description": "AddPrefix adds a prefix to the transformer input value"
                                        },
                                        "addsuffix": {
                                            "type": "string",
                                            "description": "AddSuffix adds a suffix to the transformer input value"
                                        },
                                        "trimprefix": {
                                            "type": "string",
                                            "description": "TrimPrefix removes a prefix to the transformer input value"
                                        },
                                        "trimsuffix": {
                                            "type": "string",
                                            "description": "TrimSuffix removes the suffix from the transformer input value"
                                        },
                                        "replacers": {
                                            "items": {
                                                "properties": {
                                                    "from": {
                                                        "type": "string",
                                                        "description": "From defines the source value which need to be replaced"
                                                    },
                                                    "to": {
                                                        "type": "string",
                                                        "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                    "from",
                                                    "to"
                                                ],
                                                "description": "Replacer is struct used to feed strings.Replacer"
                                            },
                                            "type": "array",
                                            "description": "Replacers specifies a list of replacer instruction"
                                        },
                                        "replacer": {
                                            "properties": {
                                                "from": {
                                                    "type": "string",
                                                    "description": "From defines the source value which need to be replaced"
                                                },
                                                "to": {
                                                    "type": "string",
                                                    "description": "To defines the \"to what\" a \"from\" value needs to be replaced"
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "from",
                                                "to"
                                            ],
                                            "description": "Replacer specifies what value needs to be changed and how"
                                        },
                                        "find": {
                                            "type": "string",
                                            "description": "Find searches for a specific value if it exists and return false if it doesn't"
                                        },
                                        "findsubmatch": {
                                            "properties": {
                                                "pattern": {
                                                    "type": "string",
                                                    "description": "Pattern defines regular expression to use for retrieving a submatch"
                                                },
                                                "captureindex": {
                                                    "type": "integer",
                                                    "description": "CaptureIndex defines which substring occurrence to retrieve. Note also that a value of `0` for `captureIndex` returns all submatches, and individual submatch indexes start at `1`."
                                                }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                                "pattern"
                                            ],
                                            "description": "Find searches for a specific value if it exists then return the value using regular expression"
                                        },
                                        "semverinc": {
                                            "type": "string",
                                            "description": "SemvVerInc specifies a  comma separated list semantic versioning component that needs to be upgraded."
                                        }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Transformer holds a transformer rule"
                                },
                                "type": "array",
                                "description": "transformers defines how the default input value need to be transformed"
                            },
                            "spec": {
                                "$schema": "http://json-schema.org/draft-04/schema",
                                "properties": {
                                    "url": {
                                        "type": "string",
                                        "description": "\"url\" defines the Gitea url to interact with"
                                    },
                                    "username": {
                                        "type": "string",
                                        "description": "\"username\" defines the username used to authenticate with Gitea API"
                                    },
                                    "token": {
                                        "type": "string",
                                        "description": "\"token\" specifies the credential used to authenticate with Gitea API"
                                    },
                                    "owner": {
                                        "type": "string",
                                        "description": "[S][C][T] owner specifies the repository owner"
                                    },
                                    "repository": {
                                        "type": "string",
                                        "description": "[S][C][T] repository specifies the name of a repository for a specific owner"
                                    },
                                    "versionfilter": {
                                        "properties": {
                                            "kind": {
                                                "type": "string",
                                                "description": "specifies the version kind such as semver, regex, or latest"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "description": "specifies the version pattern according the version kind"
                                            },
                                            "strict": {
                                                "type": "boolean",
                                                "description": "strict enforce strict versioning rule. Only used for semantic versioning at this time"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "[S] versionfilter provides parameters to specify version pattern and its type like regex, semver, or just latest."
                                    },
                                    "title": {
                                        "type": "string",
                                        "description": "[T] title defines the Gitea release title."
                                    },
                                    "tag": {
                                        "type": "string",
                                        "description": "[C][T] tag defines the Gitea release tag."
                                    },
                                    "commitish": {
                                        "type": "string",
                                        "description": "[T] commitish defines the commit-ish such as `main`"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "[T] description defines if the new release description"
                                    },
                                    "draft": {
                                        "type": "boolean",
                                        "description": "[T] draft defines if the release is a draft release"
                                    },
                                    "prerelease": {
                                        "type": "boolean",
                                        "description": "[T] prerelease defines if the release is a pre-release release"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                    "url",
                                    "owner",
                                    "repository"
                                ],
                                "description": "Spec defines settings used to interact with Gitea release"
                            },
                            "scmid": {
                                "type": "string",
                                "description": "scmid specifies the scm configuration key associated to the current resource"
                            },
                            "disablesourceinput": {
                                "type": "boolean"
                            },
                            "sourceid": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                            "kind"
                        ]
                    }
                ]
            },
            "type": "object",
            "description": "\"targets\" defines the list of Updatecli target definition.\n\n\t\texample:\n\t\t---\n\t\ttargets:\n\t\t  \tdefault:\n\t\t     \tname: 'ci: update Golangci-lint version to {{ source \"default\" }}'\n\t\t     \tkind: yaml\n\t\t     \tspec:\n\t\t         \tfile: .github/workflows/go.yaml\n\t\t         \tkey: $.jobs.build.steps[2].with.version\n\t\t     \tscmid: default\n\t\t     \tsourceid: default\n\t\t---"
        },
        "version": {
            "type": "string",
            "description": "\"version\" defines the minimum Updatecli version compatible with the manifest"
        }
    },
    "additionalProperties": false,
    "type": "object",
    "required": [
        "name"
    ],
    "description": "Spec contains pipeline configuration"
}